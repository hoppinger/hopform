<?php

/**
 * @file
 * Defines a field type for referencing a Hopform form.
 */

/**
 * Implements hook_menu().
 */
function hopform_reference_menu() {
  $items['hopform_reference/autocomplete/%/%/%'] = array(
    'page callback' => 'hopform_reference_autocomplete',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'reference_autocomplete_access',
    'access arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function hopform_reference_field_info() {
  return array(
    'hopform_reference' => array(
      'label'             => t('Hopform reference'),
      'description'       => t('This field stores the ID of a related form as an integer value.'),
      'settings'          => array(
        'referenceable_types' => array(),
      ),
      // It probably make more sense to have the referenceable types be per-field than per-instance
      // 'instance settings' => array('referenceable_types' => array()),
      'default_widget'    => 'options_select', //  hopform_reference_autocomplete',
      'default_formatter' => 'hopform_reference_default',
      // Support hook_entity_property_info() from contrib "Entity API".
      // 'property_type' => 'hopform',
      // Support default token formatter for field tokens.
      'default_token_formatter' => 'hopform_reference_plain',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function hopform_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();
  $form['referenceable_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Form types that can be referenced'),
    '#multiple' => TRUE,
    '#default_value' => $settings['referenceable_types'],
    '#options' => array_map('check_plain', hopform_form_type_names()),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_fid': fid is not valid for the field (not a valid form id, or the form is not referenceable).
 */
function hopform_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Extract fids to check.
  $ids = array();

  // First check non-numeric "fid's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['fid'])) {
      if (is_numeric($item['fid'])) {
        $ids[] = $item['fid'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_fid',
          'message' => t("%name: invalid input.",
            array('%name' => $instance['label'])),
        );
      }
    }
  }
  // Prevent performance hog if there are no ids to check.
  if ($ids) {
    $options = array(
      'ids' => $ids,
    );
    $refs = hopform_reference_potential_references($field, $options);
    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['fid']) && !isset($refs[$item['fid']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_fid',
            'message' => t("%name: this form can't be referenced.",
              array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function hopform_reference_field_is_empty($item, $field) {
  // fid = 0 is empty too, which is exactly what we want.
  return empty($item['fid']);
}

/**
 * Implements hook_field_formatter_info().
 */
function hopform_reference_field_formatter_info() {
  $ret = array(
    'hopform_reference_default' => array(
      'label' => t('Title (link)'),
      'description' => t('Display the title of the referenced form as a link to the form page.'),
      'field types' => array('hopform_reference'),
    ),
    'hopform_reference_plain' => array(
      'label' => t('Title (no link)'),
      'description' => t('Display the title of the referenced form as plain text.'),
      'field types' => array('hopform_reference'),
    ),
    'hopform_reference_form' => array(
      'label' => t('Rendered form'),
      'description' => t('Display the referenced form in a specific view mode'),
      'field types' => array('hopform_reference'),
      'settings' => array('hopform_reference_view_mode' => 'full'),
    ),
    'hopform_reference_fid' => array(
      'label' => t('Form ID'),
      'description' => t('Display the referenced form ID'),
      'field types' => array('hopform_reference'),
    ),
    'hopform_reference_path' => array(
      'label' => t('URL as plain text'),
      'description' => t('Display the URL of the referenced form'),
      'field types' => array('hopform_reference'),
      'settings' => array(
        'alias' => TRUE,
        'absolute' => FALSE
      ),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function hopform_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    case 'hopform_reference_form':
      $entity_info = entity_get_info('hopform_form');
      $modes = $entity_info['view modes'];
      $options = array();
      foreach ($modes as $name => $mode) {
        $options[$name] = $mode['label'];
      }
      $element['hopform_reference_view_mode'] = array(
        '#title' => t('View mode'),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $settings['hopform_reference_view_mode'],
        // Never empty, so no #empty_option
      );
      break;

    case 'hopform_reference_path':
      $element['alias'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display the aliased path (if exists) instead of the system path'),
        '#default_value' => $settings['alias'],
      );
      $element['absolute'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display an absolute URL'),
        '#default_value' => $settings['absolute'],
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function hopform_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = array();

  switch ($display['type']) {
    case 'hopform_reference_form':
      $entity_info = entity_get_info('hopform_form');
      $modes = $entity_info['view modes'];
      $mode = $modes[$settings['hopform_reference_view_mode']]['label'];
      $summary[] = t('View mode: %mode', array('%mode' => $mode));
      break;

    case 'hopform_reference_path':
      $summary[] = t('Aliased path: %yes_no', array('%yes_no' => $settings['alias'] ? t('Yes') : t('No')));
      $summary[] = t('Absolute URL: %yes_no', array('%yes_no' => $settings['absolute'] ? t('Yes') : t('No')));
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * Preload all forms referenced by items using 'full entity' formatters.
 */
function hopform_reference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Load the referenced forms, except for the 'hopform_reference_fid' which
  // does not need full objects.

  // Collect ids to load.
  $ids = array();
  foreach ($displays as $id => $display) {
    if ($display['type'] != 'hopform_reference_fid') {
      foreach ($items[$id] as $delta => $item) {
        $ids[$item['fid']] = $item['fid'];
      }
    }
  }
  $entities = hopform_form_load_multiple($ids);

  // Add the loaded forms to the items.
  foreach ($displays as $id => $display) {
    if ($display['type'] != 'hopform_reference_fid') {
      foreach ($items[$id] as $delta => $item) {
        if (!empty($entities[$item['fid']])) {
          $items[$id][$delta]['form'] = $entities[$item['fid']];
          $items[$id][$delta]['access'] = hopform_form_access('view', $entities[$item['fid']]);
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function hopform_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $result = array();

  switch ($display['type']) {
    case 'hopform_reference_default':
    case 'hopform_reference_plain':
      foreach ($items as $delta => $item) {
        if (!empty($item['form']) && $item['access']) {
          $form = $item['form'];
          $label = entity_label('hopform_form', $form);
          if ($display['type'] == 'hopform_reference_plain') {
            $uri = entity_uri('hopform_form', $form);
            $result[$delta] = array(
              '#type' => 'link',
              '#title' => $label,
              '#href' => $uri['path'],
              '#options' => $uri['options'],
            );
          }
          else {
            $result[$delta] = array(
              '#markup' => check_plain($label),
            );
          }
          if (!$form->status) {
            $result[$delta]['#prefix'] = '<span class="hopform-form-unpublished">';
            $result[$delta]['#suffix'] = '</span>';
          }
        }
      }
      break;

    case 'hopform_reference_form':
      // To prevent infinite recursion caused by reference cycles, we store
      // diplayed forms in a recursion queue.
      $recursion_queue = &drupal_static(__FUNCTION__, array());

      // If no 'referencing entity' is set, we are starting a new 'reference
      // thread' and need to reset the queue.
      // @todo Bug: $entity->referencing_entity on forms referenced in a different
      // thread on the page. E.g: 1 references 1+2 / 2 references 1+2 / visit homepage.
      // We'd need a more accurate way...
      if (!isset($entity->referencing_entity)) {
        $recursion_queue = array();
      }

      // The recursion queue only needs to track forms.
      if ($entity_type == 'hopform_form') {
        list($id) = entity_extract_ids($entity_type, $entity);
        $recursion_queue[$id] = $id;
      }

      // Check the recursion queue to determine which forms should be fully
      // displayed, and which forms will only be displayed as a title.
      $forms_display = array();
      foreach ($items as $delta => $item) {
        if (!empty($item['form']) && $item['access'] && !isset($recursion_queue[$item['fid']])) {
          $forms_display[$item['fid']] = $item['form'];
        }
      }

      // Load and build the fully displayed forms.
      if ($forms_display) {
        foreach ($forms_display as $fid => $form) {
          $forms_display[$fid]->referencing_entity = $entity;
          $forms_display[$fid]->referencing_field = $field['field_name'];
        }
        $forms_built = hopform_form_view_multiple($forms_display, $settings['hopform_reference_view_mode']);
      }

      // Assemble the render array.
      foreach ($items as $delta => $item) {
        if (!empty($item['form']) && $item['access']) {
          if (isset($forms_display[$item['fid']])) {
            $result[$delta] = $forms_built['hopform_form'][$item['fid']];
          }
          else {
            $form = $item['form'];
            $label = entity_label('hopform_form', $form);
            $uri = entity_uri('hopform_form', $form);
            $result[$delta] = array(
              '#type' => 'link',
              '#title' => $label,
              '#href' => $uri['path'],
              '#options' => $uri['options'],
            );
            if (!$form->status) {
              $result[$delta]['#prefix'] = '<span class="hopform-form-unpublished">';
              $result[$delta]['#suffix'] = '</span>';
            }
          }
        }
      }
      break;

    case 'hopform_reference_fid':
      foreach ($items as $delta => $item) {
        $result[$delta] = array(
          '#markup' => $item['fid'],
        );
      }
      break;

    case 'hopform_reference_path':
      foreach ($items as $delta => $item) {
        if (!empty($item['form']) && $item['access']) {
          $uri = entity_uri('hopform_form', $item['form']);
          $options = array(
            'absolute' => $settings['absolute'],
            'alias' => !$settings['alias'],
          );

          $options += $uri['options'];
          $result[$delta] = array(
            '#markup' => url($uri['path'], $options),
          );
        }
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info().
 */
function hopform_reference_field_widget_info() {
  return array(
    'hopform_reference_autocomplete' => array(
      'label'       => t('Autocomplete text field'),
      'description' => t('Display the list of referenceable forms as a textfield with autocomplete behaviour.'),
      'field types' => array('hopform_reference'),
      'settings'    => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_path' => 'hopform_reference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function hopform_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'hopform_reference';
  $info['options_buttons']['field types'][] = 'hopform_reference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function hopform_reference_field_widget_settings_form($field, $instance) {
  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  if ($widget['type'] == 'hopform_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type'             => 'select',
      '#title'            => t('Autocomplete matching'),
      '#default_value'    => $settings['autocomplete_match'],
      '#options'          => array(
        'starts_with'     => t('Starts with'),
        'contains'        => t('Contains'),
      ),
      '#description'      => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of forms.'),
    );
    $form['size'] = array(
      '#type'             => 'textfield',
      '#title'            => t('Size of textfield'),
      '#default_value'    => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required'         => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function hopform_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'hopform_reference_autocomplete':
      $element += array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['fid']) ? $items[$delta]['fid'] : NULL,
        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => NULL,
        '#element_validate' => array('hopform_reference_autocomplete_validate'),
        '#value_callback' => 'hopform_reference_autocomplete_value',
      );
      break;
  }

  return array('fid' => $element);
}

/**
 * Value callback for a hopform_reference autocomplete element.
 *
 * Replace the form fid with a form title.
 */
function hopform_reference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw fid into
    // "form title [fid:n]".
    $fid = $element['#default_value'];
    if (!empty($fid)) {
      $q = db_select('hopform_form', 'f');
      $form_title_alias = $q->addField('f', 'title');
      $q->condition('f.fid', $fid)
        ->range(0, 1);
      $result = $q->execute();
      // @todo If no result (form doesn't exist or no access).
      $value = $result->fetchField();
      $value .= ' [fid:' . $fid . ']';
      return $value;
    }
  }
}

/**
 * Validation callback for a hopform_reference autocomplete element.
 */
function hopform_reference_autocomplete_validate($element, &$form_state, $form) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $value = $element['#value'];
  $fid = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[fid:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*fid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit fid. Check that the 'title' part matches the actual title for
      // the fid.
      list(, $title, $fid) = $matches;
      if (!empty($title)) {
        $real_title = db_select('hopform_form', 'f')
          ->fields('f', array('title'))
          ->condition('f.fid', $fid)
          ->execute()
          ->fetchField();
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit fid (the submitted value was not populated by autocomplete
      // selection). Get the fid of a referencable form from the entered title.
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = nhopform_reference_potential_references($field, $options);
      if ($references) {
        // @todo The best thing would be to present the user with an
        // additional form, allowing the user to choose between valid
        // candidates with the same title. ATM, we pick the first
        // matching candidate...
        $fid = key($references);
      }
      else {
        form_error($element, t('%name: found no valid form with that title.', array('%name' => $instance['label'])));
      }
    }
  }

  // Set the element's value as the form id that was extracted from the entered
  // input.
  form_set_value($element, $fid, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function hopform_reference_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['fid'], $error['message']);
}

/**
 * Builds a list of referenceable forms suitable for the '#option' FAPI property.
 *
 * Warning: the function does NOT take care of encoding or escaping the form
 * titles. Proper massaging needs to be performed by the caller, according to
 * the destination FAPI '#type' (radios / checkboxes / select).
 *
 * @param $field
 *   The field definition.
 * @param $flat
 *   Whether optgroups are allowed.
 *
 * @return
 *   An array of referenceable form titles, keyed by form id. If the $flat
 *   parameter is TRUE, the list might be nested by optgroup first.
 */
function _hopform_reference_options($field, $flat = TRUE) {
  $references = hopform_reference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    // The label, displayed in selects and checkboxes/radios, should have HTML
    // entities unencoded. The widgets (core's options.module) take care of
    // applying the relevant filters (strip_tags() or filter_xss()).
    $label = html_entity_decode($value['rendered'], ENT_QUOTES);
    if (empty($value['group']) || $flat) {
      $options[$key] = $label;
    }
    else {
      // The group name, displayed in selects, cannot contain tags, and should
      // have HTML entities unencoded.
      $group = html_entity_decode(strip_tags($value['group']), ENT_QUOTES);
      $options[$group][$key] = $label;
    }
  }

  return $options;
}

/**
 * Retrieves an array of candidate referenceable forms.
 *
 * This info is used in various places (allowed values, autocomplete
 * results, input validation...). Some of them only need the fids,
 * others fid + titles, others yet fid + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets consumers use the parts they actually need.
 *
 * @param $field
 *   The field definition.
 * @param $options
 *   An array of options to limit the scope of the returned list. The following
 *   key/value pairs are accepted:
 *   - string: string to filter titles on (used by autocomplete).
 *   - match: operator to match the above string against, can be any of:
 *     'contains', 'equals', 'starts_with'. Defaults to 'contains'.
 *   - ids: array of specific form ids to lookup.
 *   - limit: maximum size of the the result set. Defaults to 0 (no limit).
 *
 * @return
 *   An array of valid forms in the form:
 *   array(
 *     fid => array(
 *       'title' => The form title,
 *       'rendered' => The text to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function hopform_reference_potential_references($field, $options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':'
    . ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids']))
    . ':' . $options['limit'];
  if (!isset($results[$cid])) {
    $references = _hopform_reference_potential_references_standard($field, $options);

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * Helper function for hopform_reference_potential_references().
 *
 * List of referenceable forms defined by form types.
 */
function _hopform_reference_potential_references_standard($field, $options) {
  // Avoid useless work
  if (!count($field['settings']['referenceable_types'])) {
    return array();
  }

  $query = db_select('hopform_form', 'f');
  $form_fid_alias   = $query->addField('f', 'fid');
  $form_title_alias = $query->addField('f', 'title', 'form_title');
  $form_type_alias  = $query->addField('f', 'type',  'form_type');
  $query
    ->addMetaData('id', ' _hopform_reference_potential_references_standard')
    ->addMetaData('field', $field)
    ->addMetaData('options', $options);

  if (is_array($field['settings']['referenceable_types'])) {
    $query->condition('f.type', $field['settings']['referenceable_types'], 'IN');
  }

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('f.title', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('f.title', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $query->condition('f.title', $options['string']);
        break;
    }
  }

  if ($options['ids']) {
    $query->condition('f.fid', $options['ids'], 'IN');
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query
    ->orderBy($form_title_alias)
    ->orderBy($form_type_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $form) {
    $references[$form->fid] = array(
      'title'    => $form->form_title,
      'rendered' => check_plain($form->form_title),
    );
  }
  return $references;
}

/**
 * Menu callback for the autocomplete results.
 */
function hopform_reference_autocomplete($entity_type, $bundle, $field_name, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10,
  );

  $references = hopform_reference_potential_references($field, $options);

  $matches = array();
  foreach ($references as $id => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [fid:$id]"] = '<div class="reference-autocomplete">' . $suggestion . '</div>';
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_options_list().
 */
function hopform_reference_options_list($field) {
  return _hopform_reference_options($field, FALSE);
}
