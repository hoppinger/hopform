<?php

define('HOPFORM_FORM_PREFIX', 'hopform_form_display_');

function hopform_permission() {
  return array(
    'administer hopform' =>  array(
      'title' => t('Administer forms'),
      'description' => t('Edit and manage all forms.'),
    ),
  );
}

/**
 * Implements hook_hook_info().
 */
function hopform_hook_info() {
  return array(
    'hopform_elements'          => array('group' => 'hopform'),
    'hopform_elements_alter'    => array('group' => 'hopform'),

    'hopform_action_info'       => array('group' => 'hopform'),
    'hopform_action_info_alter' => array('group' => 'hopform'),
  );
}

/**
 * Implements hook_menu().
 */
function hopform_menu() {
  $items = array();

  // Form adding interface
  $items['form/add'] = array(
    'title' => 'Add form',
    'page callback' => 'hopform_form_add_page',
    'access callback' => '_hopform_form_add_access',
    'file' => 'hopform.pages.inc',
  );
  foreach (hopform_form_types(TRUE) as $type) {
    $items['form/add/' . str_replace('_', '-', $type->type)] = array(
      'title' => $type->label,
      'title callback' => 'check_plain',
      'page callback' => 'hopform_form_page_add',
      'page arguments' => array($type->type),
      'access callback' => 'hopform_form_access',
      'access arguments' => array('create', $type->type),
      'description' => !empty($type->description) ? $type->description : '',
      'file' => 'hopform.pages.inc',
    );
  }

  // Form entity display and update interface
  $items['form/%hopform_form'] = array(
    'title callback' => 'hopform_form_page_title',
    'title arguments' => array(1),
    'page callback' => 'hopform_form_page_view',
    'page arguments' => array(1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('view', 1),
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['form/%hopform_form/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'hopform_form_page_edit',
    'page arguments' => array(1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hopform_form_delete_confirm', 1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('delete', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/form'] = array(
    'title' => 'Edit form',
    'page callback' => 'hopform_form_page_form_edit',
    'page arguments' => array(1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('form_update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/actions'] = array(
    'title' => 'Edit actions',
    'page callback' => 'hopform_form_page_actions_edit',
    'page arguments' => array(1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('actions_update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/actions/add'] = array(
    'title' => 'Add action',
    'page callback' => 'hopform_form_page_actions_action_add_page',
    'page arguments' => array(1),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('actions_update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'hopform.pages.inc',
  );

  foreach (hopform_actions(TRUE) as $action) {
    $items['form/%hopform_form/actions/add/' . str_replace('_', '-', $action['action'])] = array(
      'title' => $action['label'],
      'title callback' => 'check_plain',
      'page callback' => 'hopform_form_page_actions_action_add',
      'page arguments' => array(1, $action['action']),
      'access callback' => 'hopform_form_access',
      'access arguments' => array('actions_update', 1),
      'description' => !empty($action['description']) ? $action['description'] : '',
      'file' => 'hopform.pages.inc',
    );
  }

  $items['form/%hopform_form/actions/%hopform_form_action/edit'] = array(
    'title callback' => 'hopform_form_page_actions_action_title',
    'title arguments' => array(1,3),
    'page callback' => 'hopform_form_page_actions_action_edit',
    'page arguments' => array(1,3),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('actions_update', 1),
    'file' => 'hopform.pages.inc',
  );
  $items['form/%hopform_form/actions/%hopform_form_action/delete'] = array(
    'title callback' => 'hopform_form_page_actions_action_title',
    'title arguments' => array(1,3),
    'page callback' => 'hopform_form_page_actions_action_delete',
    'page arguments' => array(1,3),
    'access callback' => 'hopform_form_access',
    'access arguments' => array('actions_update', 1),
    'file' => 'hopform.pages.inc',
  );

  $items['admin/content/forms'] = array(
    'title' => 'Forms',
    'page callback' => 'hopform_form_page_overview',
    'access arguments' => array('administer hopform'),
    'file' => 'hopform.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function hopform_admin_paths() {
  // Use the settings from the node module to determine our admin paths.
  if (variable_get('node_admin_theme')) {
    $paths = array(
      'form/*/edit' => TRUE,
      'form/*/form' => TRUE,
      'form/*/actions' => TRUE,
      'form/*/actions/*' => TRUE,
      'form/*/delete' => TRUE,
      'form/add' => TRUE,
      'form/add/*' => TRUE,
    );

    return $paths;
  }
}

function hopform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/content/forms') {
    $item = menu_get_item('form/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function hopform_entity_info() {
  $info = array(
    'label' => t('Form'),
    'controller class' => 'EntityAPIController',
    'base table' => 'hopform_form',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'fid',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    ),
  );

  foreach (hopform_form_types() as $type => $type_info) {
    $info['bundles'][$type] = array(
      'label' => $type_info->label,
    );
  }

  return array('hopform_form' => $info);
}

function hopform_theme() {
  return array(
    'hopform_form_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'hopform.pages.inc',
    ),
    'hopform_actions_form_actions' => array(
      'render element' => 'elements',
      'file' => 'hopform.pages.inc',
    ),
  );
}


/**
 * Get all the available form types.
 */
function hopform_form_types($reset = FALSE) {
  $types = &drupal_static(__FUNCTION__);

  if (!$reset && isset($types)) {
    return $types;
  }

  if (!$reset && ($cache = cache_get(__FUNCTION__))) {
    $types = $cache->data;
    return $types;
  }

  $types = _hopform_form_types();
  cache_set(__FUNCTION__, $types);
  return $types;
}

/**
 * Collect all the available form types. Should not be used directly. Call 
 * hopform_form_types() instead.
 */
function _hopform_form_types() {
  $types = array();
  foreach (module_implements('hopform_form_type_info') as $module) {
    if (!($result = module_invoke($module, 'hopform_form_type_info'))) {
      continue;
    }

    foreach ($result as $type => $info) {
      $info = (object) $info;
      $info->type = $type;
      $info->module = $module;
      $types[$type] = $info;
    }
  }

  drupal_alter('hopform_form_type_info', $types);

  return $types;
}

/**
 * Menu load callback for hopform_form_type.
 */
function hopform_form_type_load($name) {
  $type = strtr($name, array('-' => '_'));
  $types = hopform_form_types();

  return !empty($types[$type]) ? $types[$type] : FALSE;
}

/**
 * hopform_form crud callbacks.
 */
function hopform_form_load($fid) {
  $forms = hopform_form_load_multiple(array($fid));
  return $forms ? reset($forms) : FALSE;
}
function hopform_form_load_multiple($fids) {
  return entity_load('hopform_form', $fids);
}
function hopform_form_view_multiple($forms, $view_mode = 'full', $page = NULL) {
  return entity_view('hopform_form', $forms, $view_mode, NULL, $page);
}
function hopform_form_save($form) {
  if (empty($form->created)) {
    $form->created = REQUEST_TIME;
  }
  $form->changed = REQUEST_TIME;

  return entity_save('hopform_form', $form);
}
function hopform_form_create(array $values) {
  global $user;

  return entity_create('hopform_form', $values + array(
    'uid' => $user->uid,
    'created' => REQUEST_TIME,
    'changed' => REQUEST_TIME,
    'title' => '',
    'form' => array('#hopform' => TRUE),
    'status' => 0,
  ));
}
function hopform_form_delete($fid) {
  return entity_delete('hopform_form', $fid);
}
function hopform_hopform_form_delete($form) {
  db_delete('hopform_actions')->condition('fid', $form->fid)->execute();
}
function hopform_hopform_form_insert($form) {
  hopform_form_save_path($form);
}
function hopform_hopform_form_update($form) {
  if (isset($form->path)) {
    $path = $form->path;
    $path['alias'] = trim($path['alias']);
    // Delete old alias if user erased it.
    if (!empty($path['pid']) && empty($path['alias'])) {
      path_delete($path['pid']);
    }
    hopform_form_save_path($form);
  }
}

function hopform_form_save_path($form) {
  if (isset($form->path)) {
    $path = $form->path;
    $path['alias'] = trim($path['alias']);
    // Only save a non-empty alias.
    if (!empty($path['alias'])) {
      // Ensure fields for programmatic executions.
      $path['source'] = 'form/' . $form->fid;
      $path['language'] =  LANGUAGE_NONE;
      path_save($path);
    }
  }
}

function hopform_form_actions($form) {
  $result = db_select('hopform_form_actions', 'a')
    ->fields('a')
    ->condition('a.fid', $form->fid)
    ->orderBy('a.weight', 'ASC')->orderBy('a.aid', 'ASC')
    ->execute();

  $actions = array();
  foreach ($result as $action) {
    $action->settings = unserialize($action->settings);
    $actions[$action->aid] = $action;
  }

  return $actions;
}

function hopform_form_actions_execute($form, &$form_state, $f) {
  $actions = hopform_form_actions($f);
  foreach ($actions as $action) {
    hopform_action_execute($action, $form, $form_state, $f);
  }
}

function hopform_action_execute($action, $form, &$form_state, $f) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  if (!empty($action_info['file']) && file_exists($action_info['file'])) {
    require_once $action_info['file'];
  }

  if (function_exists($action_info['execute'])) {
    $callback = $action_info['execute'];
    $callback($action, $form, $form_state, $f);
  }
}

function hopform_form_action_create($form, array $values) {
  $action = (object) ($values + array(
    'settings' => array(),
  ));

  if (empty($action->fid)) {
    $action->fid = $form->fid;
  }

  return $action;
}

function hopform_form_action_load($aid) {
  $result = db_select('hopform_form_actions', 'a')
    ->fields('a')
    ->condition('a.aid', $aid)
    ->execute();

  foreach ($result as $action) {
    $action->settings = unserialize($action->settings);
    return $action;
  }

  return FALSE;
}

function hopform_form_action_save($action) {
  $insert = empty($action->aid);

  if ($insert) {
    return drupal_write_record('hopform_form_actions', $action);
  } else {
    return drupal_write_record('hopform_form_actions', $action, array('aid'));
  }
}

function hopform_form_action_delete($aid) {
  db_delete('hopform_form_actions')->condition('aid', $aid)->execute();
}

function hopform_form_action_summary($action) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  if (!empty($action_info['file']) && file_exists($action_info['file'])) {
    require_once $action_info['file'];
  }

  if (function_exists($action_info['summary'])) {
    $callback = $action_info['summary'];
    return $callback($action);
  }

  return '';
}

/**
 * Menu title callback.
 */
function hopform_form_page_title($form) {
  return $form->title;
}
function hopform_form_page_actions_action_title($form, $action) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  return $action_info['label'];
}

/**
 * Access callback.
 */
function hopform_form_access($op, $form, $account = NULL) {
  global $user;

  if ($op == 'view') {
    return TRUE;
  }

  if (!$account) { $account = $user; }

  return user_access('administer hopform', $account);
}

function _hopform_form_add_access() {
  $types = hopform_form_types();
  foreach ($types as $type) {
    if (hopform_form_access('create', $type->type)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Get the form_id for a form.
 */
function hopform_form_form_id($form) {
  return $form->fid;
}

/**
 * Get the form for a form_id.
 */
function hopform_form_id_form($form_id) {
  return hopform_form_load($form_id);
}

/**
 * Get all the available hopform elements.
 */
function hopform_elements() {
  $elements = &drupal_static(__FUNCTION__);

  if (isset($elements)) {
    return $elements;
  }

  $elements = module_invoke_all(__FUNCTION__);
  drupal_alter(__FUNCTION__, $elements);

  return $elements;
}

/**
 * Implements hook_form_builder_types().
 */
function hopform_form_builder_types() {
  $elements = hopform_elements();

  // register all our types as form type for form_builder and assign the correct
  // elements to it.
  $types = array();
  foreach (hopform_form_types() as $type => $info) {
    if (empty($info->elements)) {
      $types['hopform_' . $type] = $elements;
      continue;
    }
    
    $types['hopform_' . $type] = array();
    foreach ($info->elements as $element_type) {
      if (!empty($elements[$element_type])) {
        $types['hopform_' . $type][$element_type] = $elements[$element_type];
      }
    }
  }

  return $types;
}

/**
 * Implements hook_form_builder_load().
 */
function hopform_form_builder_load($form_type, $form_id) {
  if (substr($form_type, 0, 8) != 'hopform_') {
    return;
  }

  $form = hopform_form_id_form($form_id);
  if (!$form) {
    array('#hopform' => TRUE);
  }

  return ($form->form ? $form->form : array()) + array('#hopform' => TRUE);
}

function hopform_forms($form_id) {
  $forms = array();

  if ($types = hopform_form_types()) {
    foreach (array_keys($types) as $type) {
      $forms['hopform_form_' . $type . '_form']['callback'] = 'hopform_form_form';
    }
  }

  if (substr($form_id, 0, strlen(HOPFORM_FORM_PREFIX)) == HOPFORM_FORM_PREFIX) {
    $fid = substr($form_id, strlen(HOPFORM_FORM_PREFIX));
    if ($form = hopform_form_id_form($fid)) {
      $forms[$form_id] = array(
        'callback' => 'hopform_form_display_form',
        'callback arguments' => array($form),
      );
    }
  }

  return $forms;
}

function hopform_form_display($form) {
  return drupal_get_form(HOPFORM_FORM_PREFIX . $form->fid);
}

function hopform_form_display_form($form, &$form_state, $f) {
  $form_state['hopform_form'] = $f;

  if (!empty($f->form)) {
    foreach (element_children($f->form) as $key) if (!empty($f->form[$key])) {
      $form[$key] = $f->form[$key];
    }
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
    '#weight' => 5,
  );

  return $form;
}

function hopform_form_display_form_submit($form, &$form_state) {
  $f = $form_state['hopform_form'];
  hopform_form_actions_execute($form, $form_state, $f);
}

function hopform_actions($reset = FALSE) {
  $actions = &drupal_static(__FUNCTION__);

  if (!$reset && isset($actions)) {
    return $actions;
  }

  if (!$reset && ($cache = cache_get(__FUNCTION__))) {
    $actions = $cache->data;
    return $actions;
  }

  $actions = _hopform_actions();
  cache_set(__FUNCTION__, $actions);
  return $actions;
}

/**
 * Collect all the available form types. Should not be used directly. Call 
 * hopform_form_types() instead.
 */
function _hopform_actions() {
  $actions = array();
  foreach (module_implements('hopform_action_info') as $module) {
    if (!($result = module_invoke($module, 'hopform_action_info'))) {
      continue;
    }

    foreach ($result as $action => $info) {
      $info['action'] = $action;
      $info['module'] = $module;

      $defaults = array('file' => drupal_get_path('module', $module) . '/' . $module . '.hopform.inc');
      foreach (array(
        'form', 'form_validate', 'form_submit',
        'execute',
        'summary',
      ) as $key) {
        $defaults[$key] = $module . '_hopform_action_' . $action . '_' . $key;
      }

      $actions[$action] = array(
        'action' => $action,
        'module' => $module,
      ) + $info + $defaults;
    }
  }

  drupal_alter('hopform_action_info', $actions);

  return $actions;
}

function hopform_action_attach_form($action, &$form, &$form_state) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  if (!empty($action_info['file']) && file_exists($action_info['file'])) {
    require_once $action_info['file'];
    $form_state['build_info']['files']['hopform_action'] = $action_info['file'];
  }

  if (function_exists($action_info['form'])) {
    $callback = $action_info['form'];
    $callback($action, $form, $form_state);
  }
}

function hopform_action_attach_form_validate($action, $form, &$form_state) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  if (!empty($action_info['file']) && file_exists($action_info['file'])) {
    require_once $action_info['file'];
  }

  if (function_exists($action_info['form_validate'])) {
    $callback = $action_info['form_validate'];
    $callback($action, $form, $form_state);
  }
}

function hopform_action_attach_form_submit($action, $form, &$form_state) {
  $actions_info = hopform_actions();
  $action_info = $actions_info[$action->type];

  if (!empty($action_info['file']) && file_exists($action_info['file'])) {
    require_once $action_info['file'];
  }

  if (function_exists($action_info['form_submit'])) {
    $callback = $action_info['form_submit'];
    $callback($action, $form, $form_state);
  }
}

function hopform_mail($key, &$message, $params) {
  $mail_callback = 'hopform_' . $key . '_mail';
  if (function_exists($mail_callback)) {
    $mail_callback($message, $params);
  }
}

function hopform_action_email_mail(&$message, $params) {
  $message['subject'] = $params['action']->settings['subject'];

  $message['body'] = array();
  if (!empty($params['intro'])) {
    $message['body'][] = "<p>" . str_replace(array(" ", "\n"), array("&nbsp;", "<br />"), $params['intro']) . "</p>";
  }
  $message['body'][] = "<p>" . str_replace(array(" ", "\n"), array("&nbsp;", "<br />"), $params['text']) . "</p>";
}
